[ORG 0x00]  ; 코드의 시작 어드레스를 0x00으로 설정
[BITS 16]   ; 이하의 코드는 16비트 코드로 설정

SECTION .text   ; text 섹션(세그먼트)을 정의

jmp 0x07C0:START    ; CS세그먼트 레지스터에 0x07C0을 복사하면서 START 레이블로 이동

START:
    mov ax, 0x07C0  ; 부트 로더의 시작 어드레스를 세그먼트 레지스터 값으로 변환
    mov ds, ax      ; DS 세그먼트 레지스터에 설정
    mov ax, 0xB800  ; 비디오 메모리의 시작 어드레스를 세그먼트 레지스터 값으로 변환
    mov es, ax      ; ES세그먼트 레지스터에 설정

mov si, 0   ; SI 레지스터(문자열 원본 인덱스 레지스터) 초기화

.SCREENCLEARLOOP:
    mov byte [ es: si ], 0  ; 비디오 메모리의 문자가 위치하는 어드레스에 0을 복사하여 문자 삭제
    mov byte [ es: si + 1 ], 0x0A   ; 비디오 메모리의 속성이 위치하는 어드레스에 0x0A(검은 바탕에 밝은 녹색)을 복사
    add si, 2   ; 문자와 속성을 설정했으므로 다음 위치로 이동

    cmp si, 80 * 25 * 2 ; 화면의 전체 크기는 80*25
    jl  .SCREENCLEARLOOP    ; SI 레지스터가 80*25*2 보다 작다면 아직 지우지 못한 영역이 있으므로 .SCREENCLEARLOOP 레이블로 이동

mov byte [ es: 0x00 ], 'M'  ; DS 세그먼트:오프셋 0xB800:0x0000에 'M' 복사
mov byte [ es: 0x01 ], 0x4A ; DS 세그먼트:오프셋 0xB800:0x0001에 0x4A(빨간 배경에 밝은 녹색 속성)를 복사

jmp $   ; 현재 위치에서 무한 로프 수행

times 510 - ( $ - $$ ) db 0x00  ; $: 현재 라인의 어드레스
                                ; $$: 현재 섹션(.text)의 시작 어드레스
                                ; $ - $$: 현재 섹션을 기준으로 하는 오프셋
                                ; 510 - ( $ - $$ ): 현재부터 어드레스 510까지
                                ; db 0x00: 1바이트를 선언하고 값은 0x00
                                ; times: 반복 수행
                                ; 현재 위치에서 어드레스 510까지 0x00 으로 채움

db 0x55     ; 1바이트를 선언하고 값은 0x55
db 0xAA     ; 1바이트를 선언하고 값은 0xAA
            ; 어드레스 511, 512에 0x55, 0xAA를 써서 부트 섹터로 표기함.
